var documenterSearchIndex = {"docs":
[{"location":"#Cuas.jl-Documentation","page":"Home","title":"Cuas.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The anti aerial package.","category":"page"},{"location":"#Table-of-contents","page":"Home","title":"Table of contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"index.md\"]","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Cuas is a anti aerial simulation package designed to compute efficiency of a weapon system against an aerial target. It offers the following scenarios: stationary vs stationary, stationary vs moving, moving vs stationary and moving vs moving. For one on one, one on many, many on one and many on many configurations.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Cuas","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Hit probability","category":"page"},{"location":"#Function-documentation","page":"Home","title":"Function documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [Cuas]\r\nOrder = [:function]","category":"page"},{"location":"#Cuas.CEP-Tuple{Float64, Float64}","page":"Home","title":"Cuas.CEP","text":"CEP(σx,σy)\n\nReturns the circular error probable (CEP) non equal variances (σx and σy)\n\nCEP cong sqrt(sigma_x^2+sigma_y^2)big(1-frac2(sigma_x^4+sigma_y^4)9(sigma_x^2+sigma_y^2)^2big)^3\n\n\n\n\n\n","category":"method"},{"location":"#Cuas.CEP-Tuple{Float64}","page":"Home","title":"Cuas.CEP","text":"CEP(σ)\n\nReturns the circular error probable (CEP) zero offset and equal variances (σ)\n\nCEP = 11774sigma\n\n\n\n\n\n","category":"method"},{"location":"#Cuas.CEP-Tuple{RectErrorB}","page":"Home","title":"Cuas.CEP","text":"CEP(error::RectErrorB;args)\n\nReturns the circular error probable (CEP) The mean point of impact can be different from (0,0). Optinal arguments are:\n\nN the population of the sample size default value is 1e6\np the probability default value is 50\n\n\n\n\n\n","category":"method"},{"location":"#Cuas.MSHP-Tuple{ExternalBallistics.AbstractTarget, RectErrorB, Int64}","page":"Home","title":"Cuas.MSHP","text":"MSHP(target,error,n)\n\nReturns the multiple shot hit probability (mshp) of n rounds.\n\nP(n shots) = 1-(1-P)^n\n\n\n\n\n\n","category":"method"},{"location":"#Cuas.SEP-Tuple{Float64, Float64}","page":"Home","title":"Cuas.SEP","text":"SEP(σ)\n\nReturns the circular error probable (CEP) zero offset and equal variances (σ)\n\n\n\n\n\n\n\n","category":"method"},{"location":"#Cuas.SSHP-Tuple{WeaponSystems.TargetCirc, RectErrorB}","page":"Home","title":"Cuas.SSHP","text":"SSHP(target, error)\n\nReturns the single shot hit probability (sshp) for a circular target\nzero mean uncorrelated\nVertical and horizontal errors are assumed to be independent...\n\nP(R)=int_r=0^r=R int_theta=0^theta=2pi frac12pisigma_xsigma_y textexp-frac(rcostheta)^22sigma_x^2+frac(rsintheta)^22sigma_y^2rdrdtheta\n\n\n\n\n\n","category":"method"},{"location":"#Cuas.SSHP-Tuple{WeaponSystems.TargetRect, RectErrorB}","page":"Home","title":"Cuas.SSHP","text":"SSHP(target,error)\n\nReturns the single shot hit probability (sshp) for a rectangular target For the side of the rectangle standard deviations mean point of impact are defined in with \"error\" variable. Vertical and horizontal errors are assumed to be independent...\n\nint_-a^aint_-b^bfrac12pisigma_xsigma_ytextexpfrac(x-mu_x)^22sigma_x^2frac(y-mu_y)^22sigma_y^2dxdy\n\n\n\n\n\n","category":"method"},{"location":"#Cuas.SSHP-Tuple{WeaponSystems.TargetSphe, ErrorBudget.SpheError}","page":"Home","title":"Cuas.SSHP","text":"SSHP(target, error)\n\nReturns the single shot hit probability (sshp) for a spherical target\nzero mean uncorrelated\nVertical and horizontal errors are assumed to be independent...\n\nP(R) = frac1(2pi)^(32)sigma_x^2sigma_y^2sigma_z^2int_0^Rint_0^piint_0^2pif(rphitheta)r^2sintheta dtheta dphi dr\n\nwhere\n\nf(r,\\phi,\\theta) = exp-[\\frac{(r^2sin^2\\phi cos^2\\theta)}{2\\sigma_x^2}+\\frac{(r^2sin^2\\theta sin^2\\phi)}{2\\sigma_y^2}+\\frac{r^2cos^2\\phi}{2\\sigma_z^2}]rdrd\\theta\n\n\n\n\n\n","category":"method"},{"location":"#Cuas.createFragment-Tuple{Float64}","page":"Home","title":"Cuas.createFragment","text":"createFragment(mass;optional arguments)\n\nCreates an object fragment with mass (kg). optional arguments are: position, velocity, time of flight, moment of inertia, distance to the center of gravity.\n\n\n\n\n\n","category":"method"},{"location":"#Cuas.createProjectile-Tuple{Float64, Float64}","page":"Home","title":"Cuas.createProjectile","text":"createProjectile(mass,Calibre;optional arguments)\n\nCreates an object projectile with mass (kg), calibre (m). optional arguments are: position, velocity, time of flight, moment of inertia, distance to the center of gravity.\n\n\n\n\n\n","category":"method"},{"location":"#Cuas.createTourelle-Tuple{Float64, Float64}","page":"Home","title":"Cuas.createTourelle","text":"createTourelle(θ,ξ;optional arguments)\n\nCreates an object turrets with elevation angle = θ and azimuth angle = ξ (in degrees). optional arguments are angles (in degrees): Φ, Ψ, χ and rwY.\n\n\n\n\n\n","category":"method"},{"location":"#Cuas.dispersion-Tuple{ExternalBallistics.AbstractTarget, WeaponSystems.Tank, ExternalBallistics.AbstractPenetrator, DataFrames.DataFrame, Dict, Dict, Dict, Dict}","page":"Home","title":"Cuas.dispersion","text":"dispersion(target,tank, proj, aero,fixedError,varibleErrorIn,variableErrorOut,randomError;optional....) Computes the fixed bias, variable bias and random errors. Returns 3 quantities: \n\nfixed bias an object of type 'Error' which contains the fixed bias in a vertical plane to the LOS\nVariable bias an object of type 'Error3D' which contains the variable bias. \n\nThe error is expressed in the range direction and two other directions perpendicular to the LOS\n\nrandom error object of type 'Error' which contains the random error in a vertical plane perpendicular to the LOS\n\nSome error are obtained from interpolations on measured data others by Monte Carlo propagation. The number of Monte Carlo simulations is N. It is an optional input its default value is 100. Each error source is propagated individualy the total error is obtained by assumption of non-correlated errors. Inputs are:\n\ntarget is a target object (ExternalBallistics) it contains the position (range of the target)\ntank is a tank object defined using WeaponSystems package\nproj is a projectile object which contains the projectile characteristics (ExternalBallistics)\naero contains the aerodynamic coefficient of the projectile\nfixedError is a dictionary which contains the fixed bias in mils\nvaribleErrorIn is a dictionary which contains the standard deviation on measured values\nvariableErrorOut is a dictionary which contains variable bias in mils measured on plane vertical to the LOS \nrandomError is a dictionary which contains the random error in mils \n\nOther optional arguments are:\n\nThe wind magnitude, its default value is null.\nThe atmosphere default are pressure 101325Pa, temperature =15°C and relative humidity = 80.\n\n\n\n\n\n","category":"method"},{"location":"#Cuas.pHit-Tuple{ExternalBallistics.AbstractTarget, RectErrorB}","page":"Home","title":"Cuas.pHit","text":"pHit(target,error)\n\nReturns the probability of hitting the target defined by'target' if the estimated error is provided by 'error'.\n\nint_-a^aint_-b^bfrac12pisigma_xsigma_ytextexpfrac(x-mu_x)^22sigma_x^2frac(y-mu_y)^22sigma_y^2dxdy\n\n\n\n\n\n","category":"method"},{"location":"#Cuas.phitAbm-Tuple{WeaponSystems.Tank, ExternalBallistics.AbstractTarget, ExternalBallistics.AbstractPenetrator, ExternalBallistics.Wind, ExternalBallistics.Air, Int64, DataFrames.DataFrame, ExternalBallistics.ZoneList, Vector{ExternalBallistics.FragShapes}, Dict{String, Float64}, Dict{String, ErrorBudget.Error}}","page":"Home","title":"Cuas.phitAbm","text":"phitAbm(tank,t, proj, w,atmosphere, fuze, aero,zones, shapes,dfError,linError;optinal...) Computes the hit probability of an air bursting munition. Returns 3 quantities: \n\nThe probability of hitting the target defined by'target' with 'p %' number of fragments. \n\n(p is an optional input, default value is 10). \n\nA vector containing the detonation points coordinates\nA vector containing the number of impacting fragments per detonation\n\nThe computation are done using MonteCarlo simulations.  The number of Monte Carlo simulations is N. It is an optional input its default value is 100. Inputs are:\n\ntank is a tank object defined using WeaponSystems package\nt is a target object (ExternalBallistics) it contains the position (range of the target)\nproj is a projectile object which contains the projectile characteristics (ExternalBallistics)\nw is the wind magnitude (cross and range wind)\natmosphere contains the air characteristics\nfuze defines the number of revolutions before detonating the projectile\naero contains the aerodynamic coefficient of the projectile\nzones is a list of zones that defines the properties of the generated fragments  \nshapes defines the shapes of the fragments \ndfError is a dictionary which contains the errors on input parameters that need to be propagated\nlinError is a dictionary which contains the errors measured that are tabulated\n\n\n\n\n\n","category":"method"},{"location":"#Cuas.sshpAbm-Tuple{WeaponSystems.Tank, ExternalBallistics.AbstractTarget, ExternalBallistics.AbstractPenetrator, Float64, DataFrames.DataFrame, ExternalBallistics.ZoneList, Vector{ExternalBallistics.FragShapes}, ErrorBudget.SpheError}","page":"Home","title":"Cuas.sshpAbm","text":"sshpAbm(tank,t, proj, fuze, aero,zones, shapes,ϵ;optional....) Computes the hit probability of an air bursting munition. Returns 3 quantities: \n\nThe probability of hitting the target defined by'target' with 'p %' number of fragments. \n\n(p is an optional input, default value is 10). \n\nA vector containing the detonation points coordinates\nA vector containing the number of impacting fragments per detonation\n\nThe computation are done using MonteCarlo simulations.  The number of Monte Carlo simulations is N. It is an optional input its default value is 100. Inputs are:\n\ntank is a tank object defined using WeaponSystems package\nt is a target object (ExternalBallistics) it contains the position (range of the target)\nproj is a projectile object which contains the projectile characteristics (ExternalBallistics)\nfuze defines the number of revolutions before detonating the projectile\naero contains the aerodynamic coefficient of the projectile\nzones is a list of zones that defines the properties of the generated fragments  \nshapes defines the shapes of the fragments \nϵ contains the total error defined using a 'SpheError' object.\n\n\n\n\n\n","category":"method"},{"location":"#Type-documentation","page":"Home","title":"Type documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [Cuas]\r\nOrder = [:type]","category":"page"},{"location":"#Cuas.Target","page":"Home","title":"Cuas.Target","text":"Target(θ,ϕ) defines a target\n\nt0 : the time at which the target appears\nρ : the range to the target in m\nθ : the elevation of the LOS\nϕ : the azimuth of the LOS\nρ′ : target velocity in range\nθ′ : target velocity in elevation\nϕ′ : target velocity in azimuth\nρ″ : target acceleration in range\nθ″ : target acceleration in elelvation\nϕ″ : target accelertion in azimuth\ntype : type of target\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
